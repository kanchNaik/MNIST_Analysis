{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Naive Bayes Classifier for Digit Recognition"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [],
   "source": [
    "# This tells matplotlib not to try opening a new window for each plot.\n",
    "%matplotlib inline\n",
    "\n",
    "# Import a bunch of libraries.\n",
    "import time\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "from matplotlib.ticker import MultipleLocator\n",
    "from sklearn.pipeline import Pipeline\n",
    "from sklearn.neighbors import KNeighborsClassifier\n",
    "from sklearn.metrics import confusion_matrix\n",
    "from sklearn.linear_model import LinearRegression\n",
    "from sklearn.naive_bayes import BernoulliNB\n",
    "from sklearn.naive_bayes import MultinomialNB\n",
    "from sklearn.naive_bayes import GaussianNB\n",
    "from sklearn.model_selection import RandomizedSearchCV, GridSearchCV, train_test_split\n",
    "from sklearn.metrics import classification_report, accuracy_score, precision_score, recall_score, f1_score\n",
    "from tabulate import tabulate\n",
    "\n",
    "# Set the randomizer seed so results are the same each time.\n",
    "np.random.seed(0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.datasets import load_digits\n",
    "mnist = load_digits()\n",
    "X, Y = mnist.data, mnist.target"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "data shape:  (1797, 64)\n",
      "label shape: (1797,)\n"
     ]
    }
   ],
   "source": [
    "# Rescale grayscale values to [0,1].\n",
    "X = (X - np.min(X)) / (np.max(X) - np.min(X))\n",
    "\n",
    "# Shuffle the input: create a random permutation of the integers between 0 and the number of data points and apply this\n",
    "# permutation to X and Y.\n",
    "\n",
    "shuffle = np.random.permutation(np.arange(X.shape[0]))\n",
    "X, Y = X[shuffle], Y[shuffle]\n",
    "\n",
    "print('data shape: ', X.shape)\n",
    "print('label shape:', Y.shape)\n",
    "\n",
    "# Set some variables to hold test, dev, and training data.\n",
    "test_data, test_labels = X[1540:], Y[1540:]\n",
    "dev_data, dev_labels = X[1400:1540], Y[1400:1540]\n",
    "train_data, train_labels = X[:1400], Y[:1400]\n",
    "mini_train_data, mini_train_labels = X[:200], Y[:200]\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [
    {
     "ename": "AttributeError",
     "evalue": "head",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mKeyError\u001b[0m                                  Traceback (most recent call last)",
      "File \u001b[1;32m~\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\sklearn\\utils\\_bunch.py:54\u001b[0m, in \u001b[0;36mBunch.__getattr__\u001b[1;34m(self, key)\u001b[0m\n\u001b[0;32m     53\u001b[0m \u001b[38;5;28;01mtry\u001b[39;00m:\n\u001b[1;32m---> 54\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28;43mself\u001b[39;49m\u001b[43m[\u001b[49m\u001b[43mkey\u001b[49m\u001b[43m]\u001b[49m\n\u001b[0;32m     55\u001b[0m \u001b[38;5;28;01mexcept\u001b[39;00m \u001b[38;5;167;01mKeyError\u001b[39;00m:\n",
      "File \u001b[1;32m~\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\sklearn\\utils\\_bunch.py:39\u001b[0m, in \u001b[0;36mBunch.__getitem__\u001b[1;34m(self, key)\u001b[0m\n\u001b[0;32m     35\u001b[0m     warnings\u001b[38;5;241m.\u001b[39mwarn(\n\u001b[0;32m     36\u001b[0m         \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_deprecated_key_to_warnings[key],\n\u001b[0;32m     37\u001b[0m         \u001b[38;5;167;01mFutureWarning\u001b[39;00m,\n\u001b[0;32m     38\u001b[0m     )\n\u001b[1;32m---> 39\u001b[0m \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28;43msuper\u001b[39;49m\u001b[43m(\u001b[49m\u001b[43m)\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[38;5;21;43m__getitem__\u001b[39;49m\u001b[43m(\u001b[49m\u001b[43mkey\u001b[49m\u001b[43m)\u001b[49m\n",
      "\u001b[1;31mKeyError\u001b[0m: 'head'",
      "\nDuring handling of the above exception, another exception occurred:\n",
      "\u001b[1;31mAttributeError\u001b[0m                            Traceback (most recent call last)",
      "Cell \u001b[1;32mIn[40], line 1\u001b[0m\n\u001b[1;32m----> 1\u001b[0m \u001b[43mmnist\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mhead\u001b[49m()\n",
      "File \u001b[1;32m~\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\sklearn\\utils\\_bunch.py:56\u001b[0m, in \u001b[0;36mBunch.__getattr__\u001b[1;34m(self, key)\u001b[0m\n\u001b[0;32m     54\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28mself\u001b[39m[key]\n\u001b[0;32m     55\u001b[0m \u001b[38;5;28;01mexcept\u001b[39;00m \u001b[38;5;167;01mKeyError\u001b[39;00m:\n\u001b[1;32m---> 56\u001b[0m     \u001b[38;5;28;01mraise\u001b[39;00m \u001b[38;5;167;01mAttributeError\u001b[39;00m(key)\n",
      "\u001b[1;31mAttributeError\u001b[0m: head"
     ]
    }
   ],
   "source": [
    "mnist.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### A. Create a 10x10 grid to visualize 10 examples of each digit."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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yK+O/OrIr4786smwjvzq9DW/TZM+gFJK+e///b+Xl7/85WXXrl3l13/918vjH//48ud//uflU5/61KQPbTBkWEd+deRXR3515FdHfvVkWEd+dfqc38T/jsYXv/jF8oxnPKO86EUvKu985zvLDTf05kOWwZBhHfnVkV8d+dWRXx351ZNhHfnV6Xt+Ez+at771reVzn/tceeMb31huuOGG8pWvfKV885vfnPRhDYoM68ivjvzqyK+O/OrIr54M68ivTt/zm/igcffdd5ebb765fPrTny7PfOYzy+Mf//hy8803l7//9/9+efDBByd9eIMgwzryqyO/OvKrI7868qsnwzryq9P7/EYT9pznPGd00003jW666abRa1/72tHv/u7vjl772teOSimjV73qVZM+vEGQYR351ZFfHfnVkV8d+dWTYR351el7fhMfNJ72tKeNSimj17zmNY/Yftddd41KKaN77713Qkc2HDKsI7868qsjvzryqyO/ejKsI786fc9v4v906sYbbyyllPJ3/+7ffcT2n/3Zny2llPL+979/w49paGRYR3515FdHfnXkV0d+9WRYR351+p7fxAeNpzzlKaWUUp70pCc9YvsTn/jEUkoply9f3vBjGhoZ1pFfHfnVkV8d+dWRXz0Z1pFfnb7nN/FB47nPfW4ppZRPf/rTj9h+3333lVJK+YEf+IENP6ahkWEd+dWRXx351ZFfHfnVk2Ed+dXpe34THzTuvPPOUkop/+k//adHbP+P//E/lk2bNpX5+fkJHNWwyLCO/OrIr4786sivjvzqybCO/Or0Pr+J/obI//f3/t7fG5VSRnfeeefoN3/zN0evfOUrR6WU0T/5J/9k0oc2GDKsI7868qsjvzryqyO/ejKsI786fc6vF4PG17/+9dHhw4dHW7duHT360Y8ePf3pTx8dPXp00oc1KDKsI7868qsjvzryqyO/ejKsI786fc5vZjQajTb2MxQAAGDaTfx3NAAAgOlj0AAAAJozaAAAAM0ZNAAAgOYMGgAAQHMGDQAAoDmDBgAA0Nym1f6PMzMza37xY8eOhWuXLl3qtF9rG/VnRLrkt3PnznDt5MmT4VqWX7ZfF33Ob/PmzeHa4cOHw7XFxcVwLfqZZOdzZiP/jE2XDDNnzpwJ17Lss/O6iz6fg5nsHJyfnw/X9uzZM3b7lStXOh3HUPPLjvvg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",
      "text/plain": [
       "<Figure size 1000x1000 with 100 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "import numpy as np\n",
    "\n",
    "def plot_digits_grid(X, Y):\n",
    "    fig, axes = plt.subplots(10, 10, figsize=(10, 10))\n",
    "    fig.subplots_adjust(hspace=0.5, wspace=0.5)\n",
    "    \n",
    "    for i in range(10):\n",
    "        idx = np.where(Y == i)[0][:10]  \n",
    "        \n",
    "        for j in range(10):\n",
    "            ax = axes[i, j]\n",
    "            ax.imshow(X[idx[j]].reshape(8, 8), cmap='gray')\n",
    "            ax.axis('off')\n",
    "            ax.set_title(f\"{Y[idx[j]]}\")\n",
    "\n",
    "plot_digits_grid(train_data, train_labels)\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Bernoulli Naive Bayse for digit classification"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Converting data in 0 and 1 format"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "X_train_binary = (train_data > 0.5).astype(int)\n",
    "X_dev_binary = (dev_data > 0.5).astype(int)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Model training"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style>#sk-container-id-1 {\n",
       "  /* Definition of color scheme common for light and dark mode */\n",
       "  --sklearn-color-text: black;\n",
       "  --sklearn-color-line: gray;\n",
       "  /* Definition of color scheme for unfitted estimators */\n",
       "  --sklearn-color-unfitted-level-0: #fff5e6;\n",
       "  --sklearn-color-unfitted-level-1: #f6e4d2;\n",
       "  --sklearn-color-unfitted-level-2: #ffe0b3;\n",
       "  --sklearn-color-unfitted-level-3: chocolate;\n",
       "  /* Definition of color scheme for fitted estimators */\n",
       "  --sklearn-color-fitted-level-0: #f0f8ff;\n",
       "  --sklearn-color-fitted-level-1: #d4ebff;\n",
       "  --sklearn-color-fitted-level-2: #b3dbfd;\n",
       "  --sklearn-color-fitted-level-3: cornflowerblue;\n",
       "\n",
       "  /* Specific color for light theme */\n",
       "  --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
       "  --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, white)));\n",
       "  --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
       "  --sklearn-color-icon: #696969;\n",
       "\n",
       "  @media (prefers-color-scheme: dark) {\n",
       "    /* Redefinition of color scheme for dark theme */\n",
       "    --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
       "    --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, #111)));\n",
       "    --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
       "    --sklearn-color-icon: #878787;\n",
       "  }\n",
       "}\n",
       "\n",
       "#sk-container-id-1 {\n",
       "  color: var(--sklearn-color-text);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 pre {\n",
       "  padding: 0;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 input.sk-hidden--visually {\n",
       "  border: 0;\n",
       "  clip: rect(1px 1px 1px 1px);\n",
       "  clip: rect(1px, 1px, 1px, 1px);\n",
       "  height: 1px;\n",
       "  margin: -1px;\n",
       "  overflow: hidden;\n",
       "  padding: 0;\n",
       "  position: absolute;\n",
       "  width: 1px;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-dashed-wrapped {\n",
       "  border: 1px dashed var(--sklearn-color-line);\n",
       "  margin: 0 0.4em 0.5em 0.4em;\n",
       "  box-sizing: border-box;\n",
       "  padding-bottom: 0.4em;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-container {\n",
       "  /* jupyter's `normalize.less` sets `[hidden] { display: none; }`\n",
       "     but bootstrap.min.css set `[hidden] { display: none !important; }`\n",
       "     so we also need the `!important` here to be able to override the\n",
       "     default hidden behavior on the sphinx rendered scikit-learn.org.\n",
       "     See: https://github.com/scikit-learn/scikit-learn/issues/21755 */\n",
       "  display: inline-block !important;\n",
       "  position: relative;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-text-repr-fallback {\n",
       "  display: none;\n",
       "}\n",
       "\n",
       "div.sk-parallel-item,\n",
       "div.sk-serial,\n",
       "div.sk-item {\n",
       "  /* draw centered vertical line to link estimators */\n",
       "  background-image: linear-gradient(var(--sklearn-color-text-on-default-background), var(--sklearn-color-text-on-default-background));\n",
       "  background-size: 2px 100%;\n",
       "  background-repeat: no-repeat;\n",
       "  background-position: center center;\n",
       "}\n",
       "\n",
       "/* Parallel-specific style estimator block */\n",
       "\n",
       "#sk-container-id-1 div.sk-parallel-item::after {\n",
       "  content: \"\";\n",
       "  width: 100%;\n",
       "  border-bottom: 2px solid var(--sklearn-color-text-on-default-background);\n",
       "  flex-grow: 1;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-parallel {\n",
       "  display: flex;\n",
       "  align-items: stretch;\n",
       "  justify-content: center;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  position: relative;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-parallel-item {\n",
       "  display: flex;\n",
       "  flex-direction: column;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-parallel-item:first-child::after {\n",
       "  align-self: flex-end;\n",
       "  width: 50%;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-parallel-item:last-child::after {\n",
       "  align-self: flex-start;\n",
       "  width: 50%;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-parallel-item:only-child::after {\n",
       "  width: 0;\n",
       "}\n",
       "\n",
       "/* Serial-specific style estimator block */\n",
       "\n",
       "#sk-container-id-1 div.sk-serial {\n",
       "  display: flex;\n",
       "  flex-direction: column;\n",
       "  align-items: center;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  padding-right: 1em;\n",
       "  padding-left: 1em;\n",
       "}\n",
       "\n",
       "\n",
       "/* Toggleable style: style used for estimator/Pipeline/ColumnTransformer box that is\n",
       "clickable and can be expanded/collapsed.\n",
       "- Pipeline and ColumnTransformer use this feature and define the default style\n",
       "- Estimators will overwrite some part of the style using the `sk-estimator` class\n",
       "*/\n",
       "\n",
       "/* Pipeline and ColumnTransformer style (default) */\n",
       "\n",
       "#sk-container-id-1 div.sk-toggleable {\n",
       "  /* Default theme specific background. It is overwritten whether we have a\n",
       "  specific estimator or a Pipeline/ColumnTransformer */\n",
       "  background-color: var(--sklearn-color-background);\n",
       "}\n",
       "\n",
       "/* Toggleable label */\n",
       "#sk-container-id-1 label.sk-toggleable__label {\n",
       "  cursor: pointer;\n",
       "  display: block;\n",
       "  width: 100%;\n",
       "  margin-bottom: 0;\n",
       "  padding: 0.5em;\n",
       "  box-sizing: border-box;\n",
       "  text-align: center;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 label.sk-toggleable__label-arrow:before {\n",
       "  /* Arrow on the left of the label */\n",
       "  content: \"▸\";\n",
       "  float: left;\n",
       "  margin-right: 0.25em;\n",
       "  color: var(--sklearn-color-icon);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {\n",
       "  color: var(--sklearn-color-text);\n",
       "}\n",
       "\n",
       "/* Toggleable content - dropdown */\n",
       "\n",
       "#sk-container-id-1 div.sk-toggleable__content {\n",
       "  max-height: 0;\n",
       "  max-width: 0;\n",
       "  overflow: hidden;\n",
       "  text-align: left;\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-toggleable__content.fitted {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-toggleable__content pre {\n",
       "  margin: 0.2em;\n",
       "  border-radius: 0.25em;\n",
       "  color: var(--sklearn-color-text);\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-toggleable__content.fitted pre {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {\n",
       "  /* Expand drop-down */\n",
       "  max-height: 200px;\n",
       "  max-width: 100%;\n",
       "  overflow: auto;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {\n",
       "  content: \"▾\";\n",
       "}\n",
       "\n",
       "/* Pipeline/ColumnTransformer-specific style */\n",
       "\n",
       "#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  color: var(--sklearn-color-text);\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-label.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "/* Estimator-specific style */\n",
       "\n",
       "/* Colorize estimator box */\n",
       "#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-estimator.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-label label.sk-toggleable__label,\n",
       "#sk-container-id-1 div.sk-label label {\n",
       "  /* The background is the default theme color */\n",
       "  color: var(--sklearn-color-text-on-default-background);\n",
       "}\n",
       "\n",
       "/* On hover, darken the color of the background */\n",
       "#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {\n",
       "  color: var(--sklearn-color-text);\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "/* Label box, darken color on hover, fitted */\n",
       "#sk-container-id-1 div.sk-label.fitted:hover label.sk-toggleable__label.fitted {\n",
       "  color: var(--sklearn-color-text);\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "/* Estimator label */\n",
       "\n",
       "#sk-container-id-1 div.sk-label label {\n",
       "  font-family: monospace;\n",
       "  font-weight: bold;\n",
       "  display: inline-block;\n",
       "  line-height: 1.2em;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-label-container {\n",
       "  text-align: center;\n",
       "}\n",
       "\n",
       "/* Estimator-specific */\n",
       "#sk-container-id-1 div.sk-estimator {\n",
       "  font-family: monospace;\n",
       "  border: 1px dotted var(--sklearn-color-border-box);\n",
       "  border-radius: 0.25em;\n",
       "  box-sizing: border-box;\n",
       "  margin-bottom: 0.5em;\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-estimator.fitted {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-0);\n",
       "}\n",
       "\n",
       "/* on hover */\n",
       "#sk-container-id-1 div.sk-estimator:hover {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-estimator.fitted:hover {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "/* Specification for estimator info (e.g. \"i\" and \"?\") */\n",
       "\n",
       "/* Common style for \"i\" and \"?\" */\n",
       "\n",
       ".sk-estimator-doc-link,\n",
       "a:link.sk-estimator-doc-link,\n",
       "a:visited.sk-estimator-doc-link {\n",
       "  float: right;\n",
       "  font-size: smaller;\n",
       "  line-height: 1em;\n",
       "  font-family: monospace;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  border-radius: 1em;\n",
       "  height: 1em;\n",
       "  width: 1em;\n",
       "  text-decoration: none !important;\n",
       "  margin-left: 1ex;\n",
       "  /* unfitted */\n",
       "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
       "  color: var(--sklearn-color-unfitted-level-1);\n",
       "}\n",
       "\n",
       ".sk-estimator-doc-link.fitted,\n",
       "a:link.sk-estimator-doc-link.fitted,\n",
       "a:visited.sk-estimator-doc-link.fitted {\n",
       "  /* fitted */\n",
       "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
       "  color: var(--sklearn-color-fitted-level-1);\n",
       "}\n",
       "\n",
       "/* On hover */\n",
       "div.sk-estimator:hover .sk-estimator-doc-link:hover,\n",
       ".sk-estimator-doc-link:hover,\n",
       "div.sk-label-container:hover .sk-estimator-doc-link:hover,\n",
       ".sk-estimator-doc-link:hover {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-3);\n",
       "  color: var(--sklearn-color-background);\n",
       "  text-decoration: none;\n",
       "}\n",
       "\n",
       "div.sk-estimator.fitted:hover .sk-estimator-doc-link.fitted:hover,\n",
       ".sk-estimator-doc-link.fitted:hover,\n",
       "div.sk-label-container:hover .sk-estimator-doc-link.fitted:hover,\n",
       ".sk-estimator-doc-link.fitted:hover {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-3);\n",
       "  color: var(--sklearn-color-background);\n",
       "  text-decoration: none;\n",
       "}\n",
       "\n",
       "/* Span, style for the box shown on hovering the info icon */\n",
       ".sk-estimator-doc-link span {\n",
       "  display: none;\n",
       "  z-index: 9999;\n",
       "  position: relative;\n",
       "  font-weight: normal;\n",
       "  right: .2ex;\n",
       "  padding: .5ex;\n",
       "  margin: .5ex;\n",
       "  width: min-content;\n",
       "  min-width: 20ex;\n",
       "  max-width: 50ex;\n",
       "  color: var(--sklearn-color-text);\n",
       "  box-shadow: 2pt 2pt 4pt #999;\n",
       "  /* unfitted */\n",
       "  background: var(--sklearn-color-unfitted-level-0);\n",
       "  border: .5pt solid var(--sklearn-color-unfitted-level-3);\n",
       "}\n",
       "\n",
       ".sk-estimator-doc-link.fitted span {\n",
       "  /* fitted */\n",
       "  background: var(--sklearn-color-fitted-level-0);\n",
       "  border: var(--sklearn-color-fitted-level-3);\n",
       "}\n",
       "\n",
       ".sk-estimator-doc-link:hover span {\n",
       "  display: block;\n",
       "}\n",
       "\n",
       "/* \"?\"-specific style due to the `<a>` HTML tag */\n",
       "\n",
       "#sk-container-id-1 a.estimator_doc_link {\n",
       "  float: right;\n",
       "  font-size: 1rem;\n",
       "  line-height: 1em;\n",
       "  font-family: monospace;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  border-radius: 1rem;\n",
       "  height: 1rem;\n",
       "  width: 1rem;\n",
       "  text-decoration: none;\n",
       "  /* unfitted */\n",
       "  color: var(--sklearn-color-unfitted-level-1);\n",
       "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 a.estimator_doc_link.fitted {\n",
       "  /* fitted */\n",
       "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
       "  color: var(--sklearn-color-fitted-level-1);\n",
       "}\n",
       "\n",
       "/* On hover */\n",
       "#sk-container-id-1 a.estimator_doc_link:hover {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-3);\n",
       "  color: var(--sklearn-color-background);\n",
       "  text-decoration: none;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 a.estimator_doc_link.fitted:hover {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-3);\n",
       "}\n",
       "</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>BernoulliNB()</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" checked><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow fitted\">&nbsp;&nbsp;BernoulliNB<a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.4/modules/generated/sklearn.naive_bayes.BernoulliNB.html\">?<span>Documentation for BernoulliNB</span></a><span class=\"sk-estimator-doc-link fitted\">i<span>Fitted</span></span></label><div class=\"sk-toggleable__content fitted\"><pre>BernoulliNB()</pre></div> </div></div></div></div>"
      ],
      "text/plain": [
       "BernoulliNB()"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "bern_nb = BernoulliNB()\n",
    "bern_nb.fit(X_train_binary, train_labels)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Model Predictions"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([0, 4, 2, 7, 7, 9, 1, 9, 0, 9, 3, 8, 6, 2, 5, 3, 3, 7, 2, 1, 0, 1,\n",
       "       7, 7, 3, 9, 2, 4, 5, 7, 7, 9, 2, 9, 5, 9, 8, 7, 9, 4, 7, 0, 2, 6,\n",
       "       8, 3, 1, 3, 7, 3, 6, 7, 6, 6, 1, 1, 0, 6, 7, 9, 7, 4, 4, 3, 1, 5,\n",
       "       1, 1, 7, 2, 6, 6, 4, 3, 1, 0, 5, 3, 9, 5, 8, 1, 7, 8, 9, 8, 2, 1,\n",
       "       0, 6, 6, 4, 4, 7, 8, 6, 5, 8, 8, 2, 9, 9, 9, 8, 1, 3, 6, 0, 4, 4,\n",
       "       7, 6, 6, 9, 0, 4, 6, 8, 5, 1, 9, 9, 3, 1, 6, 5, 9, 7, 3, 4, 4, 2,\n",
       "       4, 4, 9, 2, 9, 8, 7, 2])"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dev_pred_bern = bern_nb.predict(X_dev_binary)\n",
    "dev_pred_bern"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Prediction Results"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1000x400 with 10 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "num_images = 10\n",
    "\n",
    "# Create a plot with a grid of images\n",
    "plt.figure(figsize=(10, 4))\n",
    "\n",
    "for i in range(num_images):\n",
    "    plt.subplot(2, 5, i+1)\n",
    "    \n",
    "    # Reshape each image to 28x28 (since MNIST images are 28x28 pixels)\n",
    "    image = X_dev_binary[i].reshape(8, 8)\n",
    "    \n",
    "    # Display the image with the predicted class as the title\n",
    "    plt.imshow(image, cmap='gray')\n",
    "    \n",
    "    # Display the predicted class as the title (inside the plot)\n",
    "    plt.title(f'Pred: {dev_pred_bern[i]}', fontsize=12)\n",
    "    \n",
    "    # Hide the axes for clarity\n",
    "    plt.axis('off')\n",
    "\n",
    "# Adjust layout to ensure no overlapping\n",
    "plt.tight_layout()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Model Evaluation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "+------------+-------------+----------+------------+\n",
      "|   Accuracy |   Precision |   Recall |   F1-score |\n",
      "+============+=============+==========+============+\n",
      "|     0.8857 |      0.8897 |   0.8857 |     0.8864 |\n",
      "+------------+-------------+----------+------------+\n"
     ]
    }
   ],
   "source": [
    "accuracy_bern = accuracy_score(dev_labels, dev_pred_bern)\n",
    "precision_bern = precision_score(dev_labels, dev_pred_bern, average='weighted')\n",
    "recall_bern = recall_score(dev_labels, dev_pred_bern, average='weighted')\n",
    "f1_bern = f1_score(dev_labels, dev_pred_bern, average='weighted')\n",
    "\n",
    "metrics_table = [[\n",
    "    f\"{accuracy_bern:.4f}\",\n",
    "    f\"{precision_bern:.4f}\",\n",
    "    f\"{recall_bern:.4f}\",\n",
    "    f\"{f1_bern:.4f}\"\n",
    "]]\n",
    "\n",
    "# Print table\n",
    "print(tabulate(metrics_table, headers=[\"Accuracy\", \"Precision\", \"Recall\", \"F1-score\"], tablefmt=\"grid\"))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Multinomial Naive Bayse"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Convert pixel values in 0, 1 and 2 format"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Three-level mapping for MultinomialNB\n",
    "# 0 - white - (x < 0.33), 1 - gray - (0.33 <= x < 0.67), 2- black - (x >= 0.67)\n",
    "X_train_multi = np.digitize(train_data, bins=[0.33, 0.67])  # values will be 0, 1, or 2\n",
    "X_dev_multi = np.digitize(dev_data, bins=[0.33, 0.67])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Model Training"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style>#sk-container-id-2 {\n",
       "  /* Definition of color scheme common for light and dark mode */\n",
       "  --sklearn-color-text: black;\n",
       "  --sklearn-color-line: gray;\n",
       "  /* Definition of color scheme for unfitted estimators */\n",
       "  --sklearn-color-unfitted-level-0: #fff5e6;\n",
       "  --sklearn-color-unfitted-level-1: #f6e4d2;\n",
       "  --sklearn-color-unfitted-level-2: #ffe0b3;\n",
       "  --sklearn-color-unfitted-level-3: chocolate;\n",
       "  /* Definition of color scheme for fitted estimators */\n",
       "  --sklearn-color-fitted-level-0: #f0f8ff;\n",
       "  --sklearn-color-fitted-level-1: #d4ebff;\n",
       "  --sklearn-color-fitted-level-2: #b3dbfd;\n",
       "  --sklearn-color-fitted-level-3: cornflowerblue;\n",
       "\n",
       "  /* Specific color for light theme */\n",
       "  --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
       "  --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, white)));\n",
       "  --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
       "  --sklearn-color-icon: #696969;\n",
       "\n",
       "  @media (prefers-color-scheme: dark) {\n",
       "    /* Redefinition of color scheme for dark theme */\n",
       "    --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
       "    --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, #111)));\n",
       "    --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
       "    --sklearn-color-icon: #878787;\n",
       "  }\n",
       "}\n",
       "\n",
       "#sk-container-id-2 {\n",
       "  color: var(--sklearn-color-text);\n",
       "}\n",
       "\n",
       "#sk-container-id-2 pre {\n",
       "  padding: 0;\n",
       "}\n",
       "\n",
       "#sk-container-id-2 input.sk-hidden--visually {\n",
       "  border: 0;\n",
       "  clip: rect(1px 1px 1px 1px);\n",
       "  clip: rect(1px, 1px, 1px, 1px);\n",
       "  height: 1px;\n",
       "  margin: -1px;\n",
       "  overflow: hidden;\n",
       "  padding: 0;\n",
       "  position: absolute;\n",
       "  width: 1px;\n",
       "}\n",
       "\n",
       "#sk-container-id-2 div.sk-dashed-wrapped {\n",
       "  border: 1px dashed var(--sklearn-color-line);\n",
       "  margin: 0 0.4em 0.5em 0.4em;\n",
       "  box-sizing: border-box;\n",
       "  padding-bottom: 0.4em;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "}\n",
       "\n",
       "#sk-container-id-2 div.sk-container {\n",
       "  /* jupyter's `normalize.less` sets `[hidden] { display: none; }`\n",
       "     but bootstrap.min.css set `[hidden] { display: none !important; }`\n",
       "     so we also need the `!important` here to be able to override the\n",
       "     default hidden behavior on the sphinx rendered scikit-learn.org.\n",
       "     See: https://github.com/scikit-learn/scikit-learn/issues/21755 */\n",
       "  display: inline-block !important;\n",
       "  position: relative;\n",
       "}\n",
       "\n",
       "#sk-container-id-2 div.sk-text-repr-fallback {\n",
       "  display: none;\n",
       "}\n",
       "\n",
       "div.sk-parallel-item,\n",
       "div.sk-serial,\n",
       "div.sk-item {\n",
       "  /* draw centered vertical line to link estimators */\n",
       "  background-image: linear-gradient(var(--sklearn-color-text-on-default-background), var(--sklearn-color-text-on-default-background));\n",
       "  background-size: 2px 100%;\n",
       "  background-repeat: no-repeat;\n",
       "  background-position: center center;\n",
       "}\n",
       "\n",
       "/* Parallel-specific style estimator block */\n",
       "\n",
       "#sk-container-id-2 div.sk-parallel-item::after {\n",
       "  content: \"\";\n",
       "  width: 100%;\n",
       "  border-bottom: 2px solid var(--sklearn-color-text-on-default-background);\n",
       "  flex-grow: 1;\n",
       "}\n",
       "\n",
       "#sk-container-id-2 div.sk-parallel {\n",
       "  display: flex;\n",
       "  align-items: stretch;\n",
       "  justify-content: center;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  position: relative;\n",
       "}\n",
       "\n",
       "#sk-container-id-2 div.sk-parallel-item {\n",
       "  display: flex;\n",
       "  flex-direction: column;\n",
       "}\n",
       "\n",
       "#sk-container-id-2 div.sk-parallel-item:first-child::after {\n",
       "  align-self: flex-end;\n",
       "  width: 50%;\n",
       "}\n",
       "\n",
       "#sk-container-id-2 div.sk-parallel-item:last-child::after {\n",
       "  align-self: flex-start;\n",
       "  width: 50%;\n",
       "}\n",
       "\n",
       "#sk-container-id-2 div.sk-parallel-item:only-child::after {\n",
       "  width: 0;\n",
       "}\n",
       "\n",
       "/* Serial-specific style estimator block */\n",
       "\n",
       "#sk-container-id-2 div.sk-serial {\n",
       "  display: flex;\n",
       "  flex-direction: column;\n",
       "  align-items: center;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  padding-right: 1em;\n",
       "  padding-left: 1em;\n",
       "}\n",
       "\n",
       "\n",
       "/* Toggleable style: style used for estimator/Pipeline/ColumnTransformer box that is\n",
       "clickable and can be expanded/collapsed.\n",
       "- Pipeline and ColumnTransformer use this feature and define the default style\n",
       "- Estimators will overwrite some part of the style using the `sk-estimator` class\n",
       "*/\n",
       "\n",
       "/* Pipeline and ColumnTransformer style (default) */\n",
       "\n",
       "#sk-container-id-2 div.sk-toggleable {\n",
       "  /* Default theme specific background. It is overwritten whether we have a\n",
       "  specific estimator or a Pipeline/ColumnTransformer */\n",
       "  background-color: var(--sklearn-color-background);\n",
       "}\n",
       "\n",
       "/* Toggleable label */\n",
       "#sk-container-id-2 label.sk-toggleable__label {\n",
       "  cursor: pointer;\n",
       "  display: block;\n",
       "  width: 100%;\n",
       "  margin-bottom: 0;\n",
       "  padding: 0.5em;\n",
       "  box-sizing: border-box;\n",
       "  text-align: center;\n",
       "}\n",
       "\n",
       "#sk-container-id-2 label.sk-toggleable__label-arrow:before {\n",
       "  /* Arrow on the left of the label */\n",
       "  content: \"▸\";\n",
       "  float: left;\n",
       "  margin-right: 0.25em;\n",
       "  color: var(--sklearn-color-icon);\n",
       "}\n",
       "\n",
       "#sk-container-id-2 label.sk-toggleable__label-arrow:hover:before {\n",
       "  color: var(--sklearn-color-text);\n",
       "}\n",
       "\n",
       "/* Toggleable content - dropdown */\n",
       "\n",
       "#sk-container-id-2 div.sk-toggleable__content {\n",
       "  max-height: 0;\n",
       "  max-width: 0;\n",
       "  overflow: hidden;\n",
       "  text-align: left;\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-2 div.sk-toggleable__content.fitted {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-2 div.sk-toggleable__content pre {\n",
       "  margin: 0.2em;\n",
       "  border-radius: 0.25em;\n",
       "  color: var(--sklearn-color-text);\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-2 div.sk-toggleable__content.fitted pre {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-2 input.sk-toggleable__control:checked~div.sk-toggleable__content {\n",
       "  /* Expand drop-down */\n",
       "  max-height: 200px;\n",
       "  max-width: 100%;\n",
       "  overflow: auto;\n",
       "}\n",
       "\n",
       "#sk-container-id-2 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {\n",
       "  content: \"▾\";\n",
       "}\n",
       "\n",
       "/* Pipeline/ColumnTransformer-specific style */\n",
       "\n",
       "#sk-container-id-2 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  color: var(--sklearn-color-text);\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-2 div.sk-label.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "/* Estimator-specific style */\n",
       "\n",
       "/* Colorize estimator box */\n",
       "#sk-container-id-2 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-2 div.sk-estimator.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-2 div.sk-label label.sk-toggleable__label,\n",
       "#sk-container-id-2 div.sk-label label {\n",
       "  /* The background is the default theme color */\n",
       "  color: var(--sklearn-color-text-on-default-background);\n",
       "}\n",
       "\n",
       "/* On hover, darken the color of the background */\n",
       "#sk-container-id-2 div.sk-label:hover label.sk-toggleable__label {\n",
       "  color: var(--sklearn-color-text);\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "/* Label box, darken color on hover, fitted */\n",
       "#sk-container-id-2 div.sk-label.fitted:hover label.sk-toggleable__label.fitted {\n",
       "  color: var(--sklearn-color-text);\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "/* Estimator label */\n",
       "\n",
       "#sk-container-id-2 div.sk-label label {\n",
       "  font-family: monospace;\n",
       "  font-weight: bold;\n",
       "  display: inline-block;\n",
       "  line-height: 1.2em;\n",
       "}\n",
       "\n",
       "#sk-container-id-2 div.sk-label-container {\n",
       "  text-align: center;\n",
       "}\n",
       "\n",
       "/* Estimator-specific */\n",
       "#sk-container-id-2 div.sk-estimator {\n",
       "  font-family: monospace;\n",
       "  border: 1px dotted var(--sklearn-color-border-box);\n",
       "  border-radius: 0.25em;\n",
       "  box-sizing: border-box;\n",
       "  margin-bottom: 0.5em;\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-2 div.sk-estimator.fitted {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-0);\n",
       "}\n",
       "\n",
       "/* on hover */\n",
       "#sk-container-id-2 div.sk-estimator:hover {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-2 div.sk-estimator.fitted:hover {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "/* Specification for estimator info (e.g. \"i\" and \"?\") */\n",
       "\n",
       "/* Common style for \"i\" and \"?\" */\n",
       "\n",
       ".sk-estimator-doc-link,\n",
       "a:link.sk-estimator-doc-link,\n",
       "a:visited.sk-estimator-doc-link {\n",
       "  float: right;\n",
       "  font-size: smaller;\n",
       "  line-height: 1em;\n",
       "  font-family: monospace;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  border-radius: 1em;\n",
       "  height: 1em;\n",
       "  width: 1em;\n",
       "  text-decoration: none !important;\n",
       "  margin-left: 1ex;\n",
       "  /* unfitted */\n",
       "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
       "  color: var(--sklearn-color-unfitted-level-1);\n",
       "}\n",
       "\n",
       ".sk-estimator-doc-link.fitted,\n",
       "a:link.sk-estimator-doc-link.fitted,\n",
       "a:visited.sk-estimator-doc-link.fitted {\n",
       "  /* fitted */\n",
       "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
       "  color: var(--sklearn-color-fitted-level-1);\n",
       "}\n",
       "\n",
       "/* On hover */\n",
       "div.sk-estimator:hover .sk-estimator-doc-link:hover,\n",
       ".sk-estimator-doc-link:hover,\n",
       "div.sk-label-container:hover .sk-estimator-doc-link:hover,\n",
       ".sk-estimator-doc-link:hover {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-3);\n",
       "  color: var(--sklearn-color-background);\n",
       "  text-decoration: none;\n",
       "}\n",
       "\n",
       "div.sk-estimator.fitted:hover .sk-estimator-doc-link.fitted:hover,\n",
       ".sk-estimator-doc-link.fitted:hover,\n",
       "div.sk-label-container:hover .sk-estimator-doc-link.fitted:hover,\n",
       ".sk-estimator-doc-link.fitted:hover {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-3);\n",
       "  color: var(--sklearn-color-background);\n",
       "  text-decoration: none;\n",
       "}\n",
       "\n",
       "/* Span, style for the box shown on hovering the info icon */\n",
       ".sk-estimator-doc-link span {\n",
       "  display: none;\n",
       "  z-index: 9999;\n",
       "  position: relative;\n",
       "  font-weight: normal;\n",
       "  right: .2ex;\n",
       "  padding: .5ex;\n",
       "  margin: .5ex;\n",
       "  width: min-content;\n",
       "  min-width: 20ex;\n",
       "  max-width: 50ex;\n",
       "  color: var(--sklearn-color-text);\n",
       "  box-shadow: 2pt 2pt 4pt #999;\n",
       "  /* unfitted */\n",
       "  background: var(--sklearn-color-unfitted-level-0);\n",
       "  border: .5pt solid var(--sklearn-color-unfitted-level-3);\n",
       "}\n",
       "\n",
       ".sk-estimator-doc-link.fitted span {\n",
       "  /* fitted */\n",
       "  background: var(--sklearn-color-fitted-level-0);\n",
       "  border: var(--sklearn-color-fitted-level-3);\n",
       "}\n",
       "\n",
       ".sk-estimator-doc-link:hover span {\n",
       "  display: block;\n",
       "}\n",
       "\n",
       "/* \"?\"-specific style due to the `<a>` HTML tag */\n",
       "\n",
       "#sk-container-id-2 a.estimator_doc_link {\n",
       "  float: right;\n",
       "  font-size: 1rem;\n",
       "  line-height: 1em;\n",
       "  font-family: monospace;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  border-radius: 1rem;\n",
       "  height: 1rem;\n",
       "  width: 1rem;\n",
       "  text-decoration: none;\n",
       "  /* unfitted */\n",
       "  color: var(--sklearn-color-unfitted-level-1);\n",
       "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
       "}\n",
       "\n",
       "#sk-container-id-2 a.estimator_doc_link.fitted {\n",
       "  /* fitted */\n",
       "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
       "  color: var(--sklearn-color-fitted-level-1);\n",
       "}\n",
       "\n",
       "/* On hover */\n",
       "#sk-container-id-2 a.estimator_doc_link:hover {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-3);\n",
       "  color: var(--sklearn-color-background);\n",
       "  text-decoration: none;\n",
       "}\n",
       "\n",
       "#sk-container-id-2 a.estimator_doc_link.fitted:hover {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-3);\n",
       "}\n",
       "</style><div id=\"sk-container-id-2\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>MultinomialNB()</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-2\" type=\"checkbox\" checked><label for=\"sk-estimator-id-2\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow fitted\">&nbsp;&nbsp;MultinomialNB<a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.4/modules/generated/sklearn.naive_bayes.MultinomialNB.html\">?<span>Documentation for MultinomialNB</span></a><span class=\"sk-estimator-doc-link fitted\">i<span>Fitted</span></span></label><div class=\"sk-toggleable__content fitted\"><pre>MultinomialNB()</pre></div> </div></div></div></div>"
      ],
      "text/plain": [
       "MultinomialNB()"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "multinomial_nb = MultinomialNB()\n",
    "multinomial_nb.fit(X_train_multi, train_labels)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Model Prediction"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([0, 4, 2, 7, 7, 9, 1, 9, 0, 9, 3, 8, 6, 2, 5, 3, 8, 7, 2, 1, 0, 8,\n",
       "       7, 7, 3, 1, 2, 4, 5, 7, 7, 9, 2, 9, 5, 9, 8, 7, 9, 4, 7, 0, 2, 6,\n",
       "       8, 3, 2, 3, 7, 3, 6, 7, 6, 6, 6, 1, 0, 6, 7, 7, 7, 4, 4, 9, 1, 5,\n",
       "       1, 1, 7, 8, 6, 6, 4, 3, 1, 0, 5, 3, 7, 5, 1, 1, 7, 8, 9, 8, 2, 1,\n",
       "       0, 6, 6, 4, 4, 7, 8, 6, 5, 8, 8, 2, 2, 8, 9, 8, 1, 3, 6, 0, 4, 4,\n",
       "       7, 6, 6, 9, 0, 4, 6, 8, 5, 1, 9, 9, 3, 1, 6, 9, 9, 7, 3, 4, 4, 2,\n",
       "       4, 4, 9, 2, 9, 8, 7, 2])"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dev_pred_multi = multinomial_nb.predict(X_dev_multi)\n",
    "dev_pred_multi"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Prediction Results"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1000x400 with 10 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "num_images = 10\n",
    "\n",
    "# Create a plot with a grid of images\n",
    "plt.figure(figsize=(10, 4))\n",
    "\n",
    "for i in range(num_images):\n",
    "    plt.subplot(2, 5, i+1)\n",
    "    \n",
    "    # Reshape each image to 28x28 (since MNIST images are 28x28 pixels)\n",
    "    image = X_dev_multi[i].reshape(8, 8)\n",
    "    \n",
    "    # Display the image with the predicted class as the title\n",
    "    plt.imshow(image, cmap='gray')\n",
    "    \n",
    "    # Display the predicted class as the title (inside the plot)\n",
    "    plt.title(f'Pred: {dev_pred_multi[i]}', fontsize=12)\n",
    "    \n",
    "    # Hide the axes for clarity\n",
    "    plt.axis('off')\n",
    "\n",
    "# Adjust layout to ensure no overlapping\n",
    "plt.tight_layout()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Model Evaluation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "+------------+-------------+----------+------------+\n",
      "|   Accuracy |   Precision |   Recall |   F1-score |\n",
      "+============+=============+==========+============+\n",
      "|     0.8857 |      0.8945 |   0.8857 |     0.8868 |\n",
      "+------------+-------------+----------+------------+\n"
     ]
    }
   ],
   "source": [
    "accuracy_multi = accuracy_score(dev_labels, dev_pred_multi)\n",
    "precision_multi = precision_score(dev_labels, dev_pred_multi, average='weighted')\n",
    "recall_multi = recall_score(dev_labels, dev_pred_multi, average='weighted')\n",
    "f1_multi = f1_score(dev_labels, dev_pred_multi, average='weighted')\n",
    "\n",
    "metrics_table = [[\n",
    "    f\"{accuracy_multi:.4f}\",\n",
    "    f\"{precision_multi:.4f}\",\n",
    "    f\"{recall_multi:.4f}\",\n",
    "    f\"{f1_multi:.4f}\"\n",
    "]]\n",
    "\n",
    "# Print table\n",
    "print(tabulate(metrics_table, headers=[\"Accuracy\", \"Precision\", \"Recall\", \"F1-score\"], tablefmt=\"grid\"))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Does Multinomial Naive Bayse produced more acurate results ?\n",
    "- Yes Multinomial Naive Bayse produced more acurate results, because multinomial Naive Bayes divides data into 3 clasess 0, 1,2 and Bernoulli divides data into 2 classes. because of this multinomial retain more data compared to bernoullis hence it shows more accuracy.\n",
    "- Threshold set are 0.33 and 0.67 and and selection of threshold directly impact accuracy of the model as it decides how smooth transition from white to gray to black pixel will be.\n",
    "- Bernoullis extreem reduction oversimplifies data hence accuracy get reduced.\n",
    "- Bernoulis can become sensitive to noise as it set feature either 0 or 1 and multinomial model have multiple levels of decrete values hence noise get smoothened hence multinomial model produce better results.\n",
    "- Both models consider each feature independent but more granular data representation in multinomial model provides more accurate probabilities. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Gaussian Naive Bayse"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Model Training"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style>#sk-container-id-3 {\n",
       "  /* Definition of color scheme common for light and dark mode */\n",
       "  --sklearn-color-text: black;\n",
       "  --sklearn-color-line: gray;\n",
       "  /* Definition of color scheme for unfitted estimators */\n",
       "  --sklearn-color-unfitted-level-0: #fff5e6;\n",
       "  --sklearn-color-unfitted-level-1: #f6e4d2;\n",
       "  --sklearn-color-unfitted-level-2: #ffe0b3;\n",
       "  --sklearn-color-unfitted-level-3: chocolate;\n",
       "  /* Definition of color scheme for fitted estimators */\n",
       "  --sklearn-color-fitted-level-0: #f0f8ff;\n",
       "  --sklearn-color-fitted-level-1: #d4ebff;\n",
       "  --sklearn-color-fitted-level-2: #b3dbfd;\n",
       "  --sklearn-color-fitted-level-3: cornflowerblue;\n",
       "\n",
       "  /* Specific color for light theme */\n",
       "  --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
       "  --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, white)));\n",
       "  --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
       "  --sklearn-color-icon: #696969;\n",
       "\n",
       "  @media (prefers-color-scheme: dark) {\n",
       "    /* Redefinition of color scheme for dark theme */\n",
       "    --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
       "    --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, #111)));\n",
       "    --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
       "    --sklearn-color-icon: #878787;\n",
       "  }\n",
       "}\n",
       "\n",
       "#sk-container-id-3 {\n",
       "  color: var(--sklearn-color-text);\n",
       "}\n",
       "\n",
       "#sk-container-id-3 pre {\n",
       "  padding: 0;\n",
       "}\n",
       "\n",
       "#sk-container-id-3 input.sk-hidden--visually {\n",
       "  border: 0;\n",
       "  clip: rect(1px 1px 1px 1px);\n",
       "  clip: rect(1px, 1px, 1px, 1px);\n",
       "  height: 1px;\n",
       "  margin: -1px;\n",
       "  overflow: hidden;\n",
       "  padding: 0;\n",
       "  position: absolute;\n",
       "  width: 1px;\n",
       "}\n",
       "\n",
       "#sk-container-id-3 div.sk-dashed-wrapped {\n",
       "  border: 1px dashed var(--sklearn-color-line);\n",
       "  margin: 0 0.4em 0.5em 0.4em;\n",
       "  box-sizing: border-box;\n",
       "  padding-bottom: 0.4em;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "}\n",
       "\n",
       "#sk-container-id-3 div.sk-container {\n",
       "  /* jupyter's `normalize.less` sets `[hidden] { display: none; }`\n",
       "     but bootstrap.min.css set `[hidden] { display: none !important; }`\n",
       "     so we also need the `!important` here to be able to override the\n",
       "     default hidden behavior on the sphinx rendered scikit-learn.org.\n",
       "     See: https://github.com/scikit-learn/scikit-learn/issues/21755 */\n",
       "  display: inline-block !important;\n",
       "  position: relative;\n",
       "}\n",
       "\n",
       "#sk-container-id-3 div.sk-text-repr-fallback {\n",
       "  display: none;\n",
       "}\n",
       "\n",
       "div.sk-parallel-item,\n",
       "div.sk-serial,\n",
       "div.sk-item {\n",
       "  /* draw centered vertical line to link estimators */\n",
       "  background-image: linear-gradient(var(--sklearn-color-text-on-default-background), var(--sklearn-color-text-on-default-background));\n",
       "  background-size: 2px 100%;\n",
       "  background-repeat: no-repeat;\n",
       "  background-position: center center;\n",
       "}\n",
       "\n",
       "/* Parallel-specific style estimator block */\n",
       "\n",
       "#sk-container-id-3 div.sk-parallel-item::after {\n",
       "  content: \"\";\n",
       "  width: 100%;\n",
       "  border-bottom: 2px solid var(--sklearn-color-text-on-default-background);\n",
       "  flex-grow: 1;\n",
       "}\n",
       "\n",
       "#sk-container-id-3 div.sk-parallel {\n",
       "  display: flex;\n",
       "  align-items: stretch;\n",
       "  justify-content: center;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  position: relative;\n",
       "}\n",
       "\n",
       "#sk-container-id-3 div.sk-parallel-item {\n",
       "  display: flex;\n",
       "  flex-direction: column;\n",
       "}\n",
       "\n",
       "#sk-container-id-3 div.sk-parallel-item:first-child::after {\n",
       "  align-self: flex-end;\n",
       "  width: 50%;\n",
       "}\n",
       "\n",
       "#sk-container-id-3 div.sk-parallel-item:last-child::after {\n",
       "  align-self: flex-start;\n",
       "  width: 50%;\n",
       "}\n",
       "\n",
       "#sk-container-id-3 div.sk-parallel-item:only-child::after {\n",
       "  width: 0;\n",
       "}\n",
       "\n",
       "/* Serial-specific style estimator block */\n",
       "\n",
       "#sk-container-id-3 div.sk-serial {\n",
       "  display: flex;\n",
       "  flex-direction: column;\n",
       "  align-items: center;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  padding-right: 1em;\n",
       "  padding-left: 1em;\n",
       "}\n",
       "\n",
       "\n",
       "/* Toggleable style: style used for estimator/Pipeline/ColumnTransformer box that is\n",
       "clickable and can be expanded/collapsed.\n",
       "- Pipeline and ColumnTransformer use this feature and define the default style\n",
       "- Estimators will overwrite some part of the style using the `sk-estimator` class\n",
       "*/\n",
       "\n",
       "/* Pipeline and ColumnTransformer style (default) */\n",
       "\n",
       "#sk-container-id-3 div.sk-toggleable {\n",
       "  /* Default theme specific background. It is overwritten whether we have a\n",
       "  specific estimator or a Pipeline/ColumnTransformer */\n",
       "  background-color: var(--sklearn-color-background);\n",
       "}\n",
       "\n",
       "/* Toggleable label */\n",
       "#sk-container-id-3 label.sk-toggleable__label {\n",
       "  cursor: pointer;\n",
       "  display: block;\n",
       "  width: 100%;\n",
       "  margin-bottom: 0;\n",
       "  padding: 0.5em;\n",
       "  box-sizing: border-box;\n",
       "  text-align: center;\n",
       "}\n",
       "\n",
       "#sk-container-id-3 label.sk-toggleable__label-arrow:before {\n",
       "  /* Arrow on the left of the label */\n",
       "  content: \"▸\";\n",
       "  float: left;\n",
       "  margin-right: 0.25em;\n",
       "  color: var(--sklearn-color-icon);\n",
       "}\n",
       "\n",
       "#sk-container-id-3 label.sk-toggleable__label-arrow:hover:before {\n",
       "  color: var(--sklearn-color-text);\n",
       "}\n",
       "\n",
       "/* Toggleable content - dropdown */\n",
       "\n",
       "#sk-container-id-3 div.sk-toggleable__content {\n",
       "  max-height: 0;\n",
       "  max-width: 0;\n",
       "  overflow: hidden;\n",
       "  text-align: left;\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-3 div.sk-toggleable__content.fitted {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-3 div.sk-toggleable__content pre {\n",
       "  margin: 0.2em;\n",
       "  border-radius: 0.25em;\n",
       "  color: var(--sklearn-color-text);\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-3 div.sk-toggleable__content.fitted pre {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-3 input.sk-toggleable__control:checked~div.sk-toggleable__content {\n",
       "  /* Expand drop-down */\n",
       "  max-height: 200px;\n",
       "  max-width: 100%;\n",
       "  overflow: auto;\n",
       "}\n",
       "\n",
       "#sk-container-id-3 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {\n",
       "  content: \"▾\";\n",
       "}\n",
       "\n",
       "/* Pipeline/ColumnTransformer-specific style */\n",
       "\n",
       "#sk-container-id-3 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  color: var(--sklearn-color-text);\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-3 div.sk-label.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "/* Estimator-specific style */\n",
       "\n",
       "/* Colorize estimator box */\n",
       "#sk-container-id-3 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-3 div.sk-estimator.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-3 div.sk-label label.sk-toggleable__label,\n",
       "#sk-container-id-3 div.sk-label label {\n",
       "  /* The background is the default theme color */\n",
       "  color: var(--sklearn-color-text-on-default-background);\n",
       "}\n",
       "\n",
       "/* On hover, darken the color of the background */\n",
       "#sk-container-id-3 div.sk-label:hover label.sk-toggleable__label {\n",
       "  color: var(--sklearn-color-text);\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "/* Label box, darken color on hover, fitted */\n",
       "#sk-container-id-3 div.sk-label.fitted:hover label.sk-toggleable__label.fitted {\n",
       "  color: var(--sklearn-color-text);\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "/* Estimator label */\n",
       "\n",
       "#sk-container-id-3 div.sk-label label {\n",
       "  font-family: monospace;\n",
       "  font-weight: bold;\n",
       "  display: inline-block;\n",
       "  line-height: 1.2em;\n",
       "}\n",
       "\n",
       "#sk-container-id-3 div.sk-label-container {\n",
       "  text-align: center;\n",
       "}\n",
       "\n",
       "/* Estimator-specific */\n",
       "#sk-container-id-3 div.sk-estimator {\n",
       "  font-family: monospace;\n",
       "  border: 1px dotted var(--sklearn-color-border-box);\n",
       "  border-radius: 0.25em;\n",
       "  box-sizing: border-box;\n",
       "  margin-bottom: 0.5em;\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-3 div.sk-estimator.fitted {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-0);\n",
       "}\n",
       "\n",
       "/* on hover */\n",
       "#sk-container-id-3 div.sk-estimator:hover {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-3 div.sk-estimator.fitted:hover {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "/* Specification for estimator info (e.g. \"i\" and \"?\") */\n",
       "\n",
       "/* Common style for \"i\" and \"?\" */\n",
       "\n",
       ".sk-estimator-doc-link,\n",
       "a:link.sk-estimator-doc-link,\n",
       "a:visited.sk-estimator-doc-link {\n",
       "  float: right;\n",
       "  font-size: smaller;\n",
       "  line-height: 1em;\n",
       "  font-family: monospace;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  border-radius: 1em;\n",
       "  height: 1em;\n",
       "  width: 1em;\n",
       "  text-decoration: none !important;\n",
       "  margin-left: 1ex;\n",
       "  /* unfitted */\n",
       "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
       "  color: var(--sklearn-color-unfitted-level-1);\n",
       "}\n",
       "\n",
       ".sk-estimator-doc-link.fitted,\n",
       "a:link.sk-estimator-doc-link.fitted,\n",
       "a:visited.sk-estimator-doc-link.fitted {\n",
       "  /* fitted */\n",
       "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
       "  color: var(--sklearn-color-fitted-level-1);\n",
       "}\n",
       "\n",
       "/* On hover */\n",
       "div.sk-estimator:hover .sk-estimator-doc-link:hover,\n",
       ".sk-estimator-doc-link:hover,\n",
       "div.sk-label-container:hover .sk-estimator-doc-link:hover,\n",
       ".sk-estimator-doc-link:hover {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-3);\n",
       "  color: var(--sklearn-color-background);\n",
       "  text-decoration: none;\n",
       "}\n",
       "\n",
       "div.sk-estimator.fitted:hover .sk-estimator-doc-link.fitted:hover,\n",
       ".sk-estimator-doc-link.fitted:hover,\n",
       "div.sk-label-container:hover .sk-estimator-doc-link.fitted:hover,\n",
       ".sk-estimator-doc-link.fitted:hover {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-3);\n",
       "  color: var(--sklearn-color-background);\n",
       "  text-decoration: none;\n",
       "}\n",
       "\n",
       "/* Span, style for the box shown on hovering the info icon */\n",
       ".sk-estimator-doc-link span {\n",
       "  display: none;\n",
       "  z-index: 9999;\n",
       "  position: relative;\n",
       "  font-weight: normal;\n",
       "  right: .2ex;\n",
       "  padding: .5ex;\n",
       "  margin: .5ex;\n",
       "  width: min-content;\n",
       "  min-width: 20ex;\n",
       "  max-width: 50ex;\n",
       "  color: var(--sklearn-color-text);\n",
       "  box-shadow: 2pt 2pt 4pt #999;\n",
       "  /* unfitted */\n",
       "  background: var(--sklearn-color-unfitted-level-0);\n",
       "  border: .5pt solid var(--sklearn-color-unfitted-level-3);\n",
       "}\n",
       "\n",
       ".sk-estimator-doc-link.fitted span {\n",
       "  /* fitted */\n",
       "  background: var(--sklearn-color-fitted-level-0);\n",
       "  border: var(--sklearn-color-fitted-level-3);\n",
       "}\n",
       "\n",
       ".sk-estimator-doc-link:hover span {\n",
       "  display: block;\n",
       "}\n",
       "\n",
       "/* \"?\"-specific style due to the `<a>` HTML tag */\n",
       "\n",
       "#sk-container-id-3 a.estimator_doc_link {\n",
       "  float: right;\n",
       "  font-size: 1rem;\n",
       "  line-height: 1em;\n",
       "  font-family: monospace;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  border-radius: 1rem;\n",
       "  height: 1rem;\n",
       "  width: 1rem;\n",
       "  text-decoration: none;\n",
       "  /* unfitted */\n",
       "  color: var(--sklearn-color-unfitted-level-1);\n",
       "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
       "}\n",
       "\n",
       "#sk-container-id-3 a.estimator_doc_link.fitted {\n",
       "  /* fitted */\n",
       "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
       "  color: var(--sklearn-color-fitted-level-1);\n",
       "}\n",
       "\n",
       "/* On hover */\n",
       "#sk-container-id-3 a.estimator_doc_link:hover {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-3);\n",
       "  color: var(--sklearn-color-background);\n",
       "  text-decoration: none;\n",
       "}\n",
       "\n",
       "#sk-container-id-3 a.estimator_doc_link.fitted:hover {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-3);\n",
       "}\n",
       "</style><div id=\"sk-container-id-3\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>GaussianNB()</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-3\" type=\"checkbox\" checked><label for=\"sk-estimator-id-3\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow fitted\">&nbsp;&nbsp;GaussianNB<a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.4/modules/generated/sklearn.naive_bayes.GaussianNB.html\">?<span>Documentation for GaussianNB</span></a><span class=\"sk-estimator-doc-link fitted\">i<span>Fitted</span></span></label><div class=\"sk-toggleable__content fitted\"><pre>GaussianNB()</pre></div> </div></div></div></div>"
      ],
      "text/plain": [
       "GaussianNB()"
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Train GaussianNB\n",
    "gs_nb = GaussianNB()\n",
    "gs_nb.fit(train_data, train_labels)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Model Prediction"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([0, 4, 2, 7, 7, 9, 1, 9, 0, 7, 3, 8, 6, 8, 5, 3, 8, 7, 2, 1, 0, 8,\n",
       "       7, 7, 3, 1, 8, 4, 5, 7, 7, 9, 1, 3, 5, 1, 8, 7, 9, 7, 7, 0, 2, 6,\n",
       "       8, 3, 1, 3, 7, 3, 6, 7, 6, 6, 6, 1, 0, 6, 7, 7, 7, 4, 4, 9, 1, 5,\n",
       "       1, 1, 7, 8, 6, 6, 4, 3, 1, 0, 5, 8, 9, 5, 8, 1, 7, 7, 9, 8, 8, 1,\n",
       "       0, 6, 6, 4, 4, 7, 8, 6, 5, 8, 8, 2, 2, 1, 9, 8, 8, 3, 6, 0, 4, 4,\n",
       "       7, 6, 6, 9, 0, 4, 6, 8, 5, 1, 9, 8, 3, 8, 6, 5, 9, 7, 3, 4, 4, 8,\n",
       "       4, 4, 3, 8, 9, 8, 7, 6])"
      ]
     },
     "execution_count": 30,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Evaluate on dev data\n",
    "dev_gs_pred = gs_nb.predict(dev_data)\n",
    "dev_gs_pred"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Prediction Results"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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zEmad9tttyXNG+t6e3srvYSqk/prdvvttyfN6+npSZrX0NCQNC/1cSf1ZzEqL/W/ablcTpqXen0dHR1J89rb25PmVYIzxwAAAGRPOQYAACB7yjEAAADZU44BAADInnIMAABA9pRjAAAAsqccAwAAkD3lGAAAgOwpxwAAAGRPOQYAACB7yjEAAADZU44BAADInnIMAABA9pRjAAAAsqccAwAAkD3lGAAAgOwpxwAAAGRPOQYAACB7yjEAAADZKxVFUVR6EQAAAFBJzhwDAACQPeUYAACA7CnHAAAAZE85BgAAIHvKMQAAANlTjgEAAMiecgwAAED2lGMAAACypxxXUGNjY7S2tlZ6GTBmmAkYzkzAcGYChjMTaWVbjsvlcpRKpaE/dXV1MXv27Lj55pvjN7/5TaWXd0z++7//O66++uo444wzYuLEiTF//vzYuHFjpZdFlRoPM/Gtb30rrrzyypg+fXqUSqVob2+v9JKoYuNhJhwnSGk8zMSBAwfinnvuiVmzZkVdXV1ceOGF8cQTT1R6WVSpap+J9vb2Yet/758tW7ZUeoknXU2lF1Bp3/jGN2LWrFnx1ltvxTPPPBPf+9734oc//GG8+OKLMXHixEov73298sorcemll8Ypp5wSf/M3fxOTJk2KRx55JBYtWhQ/+clP4jOf+Uyll0iVqtaZiIj4+7//+/jgBz8YF110UTz99NOVXg7jRLXOhOMEJ0q1zkRExJ133hl333133HDDDTF37tzo7u6OZcuWRalUimuvvbbSy6NKVetMXHXVVXHuuecesn3VqlWxZ8+emDt3bgVWVWFFph555JEiIoqf//znw7Z/5StfKSKiePzxx9/3sXv27EmyhoaGhmL58uWjeuxNN91U1NTUFL/85S+Htr3xxhvF2WefXXziE59Isj7yUu0zURRFsWPHjqIoimL37t1FRBRf//rXk6yLPFX7TDhOkFq1z8TOnTuL2tra4stf/vLQtgMHDhSXXXZZMXPmzGL//v1J1kg+qn0mDudXv/pVUSqVihtuuCFZZjXJ9rLq9/PZz342IiJ27NgRERGtra0xefLk2L59eyxevDhOP/30uO666yLinUtzOjo64uMf/3jU1dXF9OnTY8WKFfHaa68NyyyKIlavXh0zZ86MiRMnxsKFC+Oll1467PNv3749tm/fftR1bt68OS666KI4//zzh7ZNnDgxrrzyynj++edj27Zto3r98F7VMhMR7/zcDZxo1TITjhOcLNUyE93d3bFv37646aabhraVSqW48cYbY+fOnfHss8+O6vXDe1XLTBzOE088EUVRDK0vN9lfVv1eB3ekqVOnDm3bv39/fOELX4j58+fHvffeO3R5xIoVK6JcLsf1118ft956a+zYsSMeeOCB2Lp1a2zZsiVqa2sjIuJrX/tarF69OhYvXhyLFy+O559/PhYtWhR79+495Pk/97nPRUREX1/fEdf59ttvxxlnnHHI9oNr+8///M8477zzRv4FgPeolpmAk6VaZsJxgpOlWmZi69atMWnSpPjoRz86bPsll1wydPv8+fNH90WAd6mWmTiczs7OOPvss/P90ZtKnraupIOXQWzYsKHYvXt38corrxTf//73i6lTpxYTJkwodu7cWRRFUSxfvryIiOKOO+4Y9vjNmzcXEVF0dnYO2/7UU08N275r167i1FNPLZYsWVIcOHBg6H6rVq0qIuKQyyAaGhqKhoaGo67/T/7kT4r6+vri9ddfH7b90ksvLSKiuPfee4/1SwFFUVT/TLyby6pJodpnwnGC1Kp9JpYsWVKcc845h2x/4403DrteOJpqn4n3evHFF4uIKFauXDnix44X2V9Wffnll8e0adPi7LPPjmuvvTYmT54cTz75ZMyYMWPY/W688cZhf1+/fn1MmTIlPv/5z8err7469Ofiiy+OyZMnD/020A0bNsTevXvjlltuiVKpNPT4tra2w66nr6/vmL7Lc+ONN8bAwED8+Z//eWzdujX+67/+K9ra2uK5556LiIg333xzBF8F+P+qdSbgRKnWmXCc4ESp1pl4880347TTTjtke11d3dDtMBrVOhPv1dnZGRGR7SXVES6rju9+97sxe/bsqKmpienTp8f5558ff/AHw79nUFNTEzNnzhy2bdu2bTE4OBhnnnnmYXN37doVERH9/f0REYdcujZt2rTDXu52rP74j/847r///rjjjjviE5/4REREnHvuufGtb30rVq5cGZMnTx51Nnmr1pmAE6VaZ8JxghOlWmdiwoQJ8fbbbx+y/a233hq6HUajWmfi3YqiiMcffzwuuOCCuPDCC5NkVqPsy/Ell1wSn/zkJ494n9NOO+2QHfzAgQNx5plnDn2H5b2mTZuWbI3v5+abb47rr78+fvGLX8Sp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MWleX19f0jxGrrm5udJLOKlS78OMP+VyeUznpdbT05M076KLLkqa193dnTQvBwMDA0nzWlpakual/iw2ODiYNC/1caK3tzdpHpWX+n2zra0taV5HR0fSPA7lzDEAAADZU44BAADInnIMAABA9pRjAAAAsqccAwAAkD3lGAAAgOwpxwAAAGRPOQYAACB7yjEAAADZU44BAADInnIMAABA9pRjAAAAsqccAwAAkD3lGAAAgOwpxwAAAGRPOQYAACB7yjEAAADZU44BAADInnIMAABA9moqvYBUWltbk+a1tbUlzWtubk6al/r1Mv40NjZWegknVX19faWXQGLt7e1J8zo6OpLmDQwMJM1LrampKWme4874c9dddyXNu/7665PmpdbT05M0b/ny5Unzuru7k+YxcqmPE6n7ROr34XK5nDRvPHDmGAAAgOwpxwAAAGRPOQYAACB7yjEAAADZU44BAADInnIMAABA9pRjAAAAsqccAwAAkD3lGAAAgOwpxwAAAGRPOQYAACB7yjEAAADZU44BAADInnIMAABA9pRjAAAAsqccAwAAkD3lGAAAgOwpxwAAAGRPOQYAACB7NZVeQCq9vb1J81paWpLmLV++PGkeHE19fX2ll3BSNTc3V3oJJNbT05M0L/Vxoqura0znTZkyJWleX19f0jxGrqmpKWleY2Nj0rxyuZw0L/X7eur3gFmzZiXNY+RS7yOp3zdTSz2zHMqZYwAAALKnHAMAAJA95RgAAIDsKccAAABkTzkGAAAge8oxAAAA2VOOAQAAyJ5yDAAAQPaUYwAAALKnHAMAAJA95RgAAIDsKccAAABkTzkGAAAge8oxAAAA2VOOAQAAyJ5yDAAAQPaUYwAAALKnHAMAAJA95RgAAIDslYqiKI7pjqXSiV7LcWltbU2a19LSMqbzcnOMu+lJNdZnor6+PmneggULkubNmjUraV57e3vSvI6OjqR5qddnJkausbExaV65XE6al3rG+vv7k+al/vqlZiZGrqenJ2le6n14cHAwad5Yf19PLYeZSP1Zp6+vL2nelClTkuYtXLgwaV7q94Cx7lhmwpljAAAAsqccAwAAkD3lGAAAgOwpxwAAAGRPOQYAACB7yjEAAADZU44BAADInnIMAABA9pRjAAAAsqccAwAAkD3lGAAAgOwpxwAAAGRPOQYAACB7yjEAAADZU44BAADInnIMAABA9pRjAAAAsqccAwAAkD3lGAAAgOyViqIoKr0IAAAAqCRnjgEAAMiecgwAAED2lGMAAACypxwDAACQPeUYAACA7CnHAAAAZE85BgAAIHvKMQAAANlTjgEAAMje/wN0l3qzpDraUAAAAABJRU5ErkJggg==",
      "text/plain": [
       "<Figure size 1000x400 with 10 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "num_images = 10\n",
    "\n",
    "# Create a plot with a grid of images\n",
    "plt.figure(figsize=(10, 4))\n",
    "\n",
    "for i in range(num_images):\n",
    "    plt.subplot(2, 5, i+1)\n",
    "    \n",
    "    # Reshape each image to 28x28 (since MNIST images are 28x28 pixels)\n",
    "    image = train_data[i].reshape(8, 8)\n",
    "    \n",
    "    # Display the image with the predicted class as the title\n",
    "    plt.imshow(image, cmap='gray')\n",
    "    \n",
    "    # Display the predicted class as the title (inside the plot)\n",
    "    plt.title(f'Pred: {dev_gs_pred[i]}', fontsize=12)\n",
    "    \n",
    "    # Hide the axes for clarity\n",
    "    plt.axis('off')\n",
    "\n",
    "# Adjust layout to ensure no overlapping\n",
    "plt.tight_layout()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Model Evaluation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "+------------+-------------+----------+------------+\n",
      "|   Accuracy |   Precision |   Recall |   F1-score |\n",
      "+============+=============+==========+============+\n",
      "|     0.8429 |      0.8932 |   0.8429 |     0.8394 |\n",
      "+------------+-------------+----------+------------+\n"
     ]
    }
   ],
   "source": [
    "accuracy_gnb = accuracy_score(dev_labels, dev_gs_pred)\n",
    "precision_gnb = precision_score(dev_labels, dev_gs_pred, average='weighted')\n",
    "recall_gnb = recall_score(dev_labels, dev_gs_pred, average='weighted')\n",
    "f1_gnb = f1_score(dev_labels, dev_gs_pred, average='weighted')\n",
    "\n",
    "metrics_table = [[\n",
    "    f\"{accuracy_gnb:.4f}\",\n",
    "    f\"{precision_gnb:.4f}\",\n",
    "    f\"{recall_gnb:.4f}\",\n",
    "    f\"{f1_gnb:.4f}\"\n",
    "]]\n",
    "\n",
    "# Print table\n",
    "print(tabulate(metrics_table, headers=[\"Accuracy\", \"Precision\", \"Recall\", \"F1-score\"], tablefmt=\"grid\"))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Why GuassianNB does not work well for digits dataset.\n",
    "- GuassianNB requires data to be distributed normally but pixels of digits does not follow normal distribution hence GuassianNB does not work well.\n",
    "- Pixel data is often sparse data which is handled better by Bernoulis and Multinomial models.\n",
    "- GuassianNB is sensitive to outliers where as multinomial and bernoullis model handle outliers very well.\n",
    "- GuassianNB assumes features to be independent and here adjecent pixels could be related to each other, hence assumption made by GuassianNB is violated this might be also a reason that GuassianNB performs poorly compared to others.\n",
    "- GuasianNB is good for handling simple data but complex nuanses like curves and irregularity can not be handled well"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
